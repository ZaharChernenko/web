[project]
name = "backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "faker>=37.3.0",
    "fastapi>=0.115.12",
    "punq>=0.7.0",
    "pydantic>=2.11.4",
    "pylint>=3.3.7",
    "sqlalchemy>=2.0.41",
    "uvicorn>=0.34.2",
]

[tool.pytest.ini_options]
pythonpath = ["."]  # to run without python -m, otherwise there will be no src in the path
testpaths = ["tests"]

[tool.isort]
profile = "black"

[tool.mypy]
check_untyped_defs = true
explicit_package_bases = true  # without this, mypy complains about duplicate packages.
ignore_missing_imports = true
disable_error_code = [
    "attr-defined",
    "import-untyped",
    "union-attr",
]

[tool.ruff]
line-length = 120
[tool.ruff.format]
quote-style = "double"
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # ignore unused imports
]
"conftest.py" = [
    "E402",
    "F401",
    "F811",
]

[tool.pylint]
[tool.pylint.main]
ignore-paths = ["^tests/unit/",]
init-hook = """
import os, sys
cur_dir = os.getcwd()
sys.path.append(cur_dir)
"""
[tool.pylint.format]
max-line-length = 120
[tool.pylint.messages_control]
disable = [
    "duplicate-code",
    "missing-module-docstring",
    "missing-function-docstring",
    "missing-class-docstring",
    "trailing-newlines",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-positional-arguments",
    "raise-missing-from",
    "line-too-long",
]
ignored-modules = ["vim"]
[tool.pylint.VARIABLES]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-rgx="^(((I|T|E|Supports)[A-Z][a-zA-Z0-9]*)|[A-Z][a-zA-Z0-9]*Error)$"
const-naming-style= "any"
function-naming-style = "snake_case"
typevar="^(Template)[A-Z][a-zA-Z0-9]*$"
variable-naming-style = "snake_case"
module-naming-style = "snake_case"
inlinevar-naming-style = "any"
